---
- name: Set Portainer url
  ansible.builtin.set_fact:
    portainer_url: "https://{{ ansible_host }}:{{ portainer_port | default(portainer_port_default) }}"

- name: Get jwt token
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/auth"
    method: POST
    body_format: json
    body:
      username: "admin"
      password: "{{ portainer_admin_password | default(portainer_admin_password_default) }}"
    validate_certs: false
  register: get_jwt_token_response

- name: Get endpoints
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/endpoints?name=primary"
    method: GET
    headers:
      Authorization: "Bearer {{ get_jwt_token_response.json.jwt }}"
    validate_certs: false
  register: get_endpoints_result

- name: Set Primary endpoint var
  ansible.builtin.set_fact:
    portainer_endpoint: "{{ get_endpoints_result.json | first }}"

- name: Get Stacks
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks"
    method: GET
    headers:
      Authorization: "Bearer {{ get_jwt_token_response.json.jwt }}"
    validate_certs: false
  register: get_stacks_result

- name: Set Stacks var
  ansible.builtin.set_fact:
    stacks: "{{ get_stacks_result.json }}"

- name: Get Stack
  ansible.builtin.set_fact:
    stack: "{{ stacks | selectattr('Name', '==', service_id) | default([]) }}"

- name: Delete Stack
  when: stack | length > 0
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ item.Id }}?endpointId={{ portainer_endpoint.Id }}"
    method: DELETE
    headers:
      Authorization: "Bearer {{ get_jwt_token_response.json.jwt }}"
    status_code: [200, 204, 404]
    validate_certs: false
  register: delete_stack_return
  changed_when: delete_stack_return.status == 204
  loop: "{{ stack }}"